
# network size
SIZE 1000
# parameters of periodic execution
CYCLES 100
CYCLE SIZE*10000

DEGREE 22 # ----

###################################################################
# Parameters 
#- # of selfish miners 
#- Computational power of selfish miners 
#- the interval of time between generation of 2 consecutive blocks
#- The latencies between the nodes of the TinyCoin network

TheNumberSelfishMiners 100
ComputationalPower 100
TimeGenerationConsecutiveBlocks 100
TheLatenciesNodes 100

#####################################################################

# parameters of message transfer
# delay values here are relative to cycle length, in percentage,
# eg 50 means half the cycle length, 200 twice the cycle length, etc.
MINDELAY 0
MAXDELAY 0
# drop is a probability, 0<=DROP<=1
DROP 0


random.seed 1234567890
network.size SIZE
simulation.endtime CYCLE*CYCLES		# tell that when the simulation when to stop
simulation.logtime CYCLE

################### protocols ===========================
# config tinyProtocol protocol
# overlay network (link)
# transport layer (tr)

protocol.link peersim.core.IdleProtocol					# generate link nodes neighbor

protocol.urt UniformRandomTransport
protocol.urt.mindelay (CYCLE*MINDELAY)/100
protocol.urt.maxdelay (CYCLE*MAXDELAY)/100

protocol.tr UnreliableTransport
protocol.tr.transport urt
protocol.tr.drop DROP

protocol.tinyProtocol protocolTinyCoin							# assign avg = a function in example
protocol.tinyProtocol.linkable link						# contain of links
protocol.tinyProtocol.step CYCLE						# scheduling parameter familiar from cycle based model
protocol.tinyProtocol.transport tr


################### initialization ======================
# 
init.rndlink WireKOut									# random connections
init.rndlink.k 20										# degree of random connection of nodes 
init.rndlink.protocol link								# link indicate to the protocol above

init.vals InitTinyCoin									# LinearDistribution should be replaced by another code (the initialization of model)
init.vals.protocol tinyProtocol
init.vals.max SIZE										
init.vals.min 1

# specific to the event based model for scheduling the periodic call of the cycle based interface
# It is responsible for scheduling the periodic call of the cycle basd interface (nextCycle)
# This component will first assign a random point in time between 0 and CYCLE to all nodes,
#  which will be the first time nextCycle is called on protocol tinyProtocol
# Then the next calls will happen in intervals of exactly CYCLE time steps regularly

init.sch CDScheduler
init.sch.protocol tinyProtocol							# assign a random point n time between 0 and CYCLE to all nodes
init.sch.randstart										# random point in time between 0 and CYCLE

################ control ==============================

# selects which initializers are allowed to run.
# NOTE the default order is according to alphabetical order of names ( in case no include property)
# include.init rnd lin									# use rnd and lin from the initialization


# control is oracle
control.0 SingleValueObserver							# an Observer to monitor the change of model
control.0.protocol tinyProtocol							# this Observer also uses the protocol
control.0.step CYCLE									# specify the tep parameter -> how often this control is called
														# O.W it will be the same with Cycle-driven






