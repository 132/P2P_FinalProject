SIZE 100								    # network size
TOTALCYCLES 1000					#
OBSERVERCYCLES TOTALCYCLES-1
CYCLE 10									# 
MINDELAY 0
MAXDELAY 100
DROP 0										# drop is a probability, 0<=DROP<=1
DEGREE 2
###################################################################
#- # of selfish miners 
#- Computational power of selfish miners 
#- the interval of time between generation of 2 consecutive blocks
#- The latencies between the nodes of the TinyCoin network

ThePercentSelfishMiners 30
ComputationalPower 50						# did not implement it 
TimeGenerationConsecutiveBlocks 50			# Time should be less than
TheLatenciesNodes 10						# The latency Nodes less than 
#####################################################################
random.seed 1234567890
network.size SIZE
simulation.endtime TOTALCYCLES							# tell that when the simulation when to stop
simulation.logtime CYCLE
						
################### protocols ===========================
# config tinyProtocol protocol
# overlay network (link)
# transport layer (tr)

protocol.link peersim.core.IdleProtocol					# generate link nodes neighbor

protocol.urt weightedTransportTinyCoin
protocol.urt.mindelay MINDELAY
protocol.urt.maxdelay MAXDELAY
protocol.urt.deplayNodes TheLatenciesNodes

protocol.tr UnreliableTransport
protocol.tr.transport urt
protocol.tr.drop DROP

protocol.tinyProtocol protocolTinyCoin						# assign protocol
protocol.tinyProtocol.linkable link							# contain of links
protocol.tinyProtocol.step CYCLE							# scheduling parameter familiar from cycle based model
protocol.tinyProtocol.transport tr


################### initialization ======================
# 
init.rndlink WireKOut										# random connections
init.rndlink.k DEGREE											# degree of random connection of nodes 
init.rndlink.protocol link									# link indicate to the protocol above

init.initTiny InitTinyCoin									# call init
init.initTiny.protocol tinyProtocol							# choose protocol
init.initTiny.percentageOfSelfish ThePercentSelfishMiners	# add para
init.initTiny.selfishPower ComputationalPower				# assume that the power from 1 -> 3


# specific to the event based model for scheduling the periodic call of the cycle based interface
# It is responsible for scheduling the periodic call of the cycle basd interface (nextCycle)
# This component will first assign a random point in time between 0 and CYCLE to all nodes,
#  which will be the first time nextCycle is called on protocol tinyProtocol
# Then the next calls will happen in intervals of exactly CYCLE time steps regularly

init.sch CDScheduler
init.sch.protocol tinyProtocol							# assign a random point n time between 0 and CYCLE to all nodes
init.sch.randstart										# random point in time between 0 and CYCLE

################ control ==============================

# control is oracle
control.oracle Oracle											# assign the Oracle
control.oracle.protocol tinyProtocol							# choose the protocol
control.oracle.step CYCLE										# oracle is called per CYCLE
control.oracle.delayBlockTime TimeGenerationConsecutiveBlocks	# time per block

# Observer to write the number of Fork and Time
control.obser observerTinyCoin
control.obser.protocol tinyProtocol
control.obser.step OBSERVERCYCLES										# time call observer

control.obser.percentageOfSelfish ThePercentSelfishMiners
control.obser.ComputationalPower ComputationalPower				# did not implement it 
control.obser.TimeBlocks TimeGenerationConsecutiveBlocks	# Time should be less than
control.obser.TheLatenciesNodes TheLatenciesNodes
control.obser.degree DEGREE